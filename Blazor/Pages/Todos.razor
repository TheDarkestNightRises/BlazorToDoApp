@page "/Todos"
@using Domain.Models
@using Domain.Interfaces
@inject ITodoHome TodoHome

<h3>Todos</h3>

@if (todos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!todos.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Owner ID</th> <th>Todo ID</th> <th>Title</th> <th>Completed?</th> <th> Remove </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todos)
        {
            <tr>
                <td>@item.OwnerID</td> 
                <td>@item.Id</td> 
                <td>@item.Title</td> 
                <td>
                    <label class="switch">
                        <input type="checkbox"
                               checked=@item.IsCompleted 
                                    @onchange="@((arg) => ToggleStatus((bool)arg.Value, item))">
                        <span class="slider round"></span>
                    </label>
                </td>
                <td>
                    <label 
                        @onclick="@(() => RemoveToDo(item.Id))" 
                        style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">@errorLabel</label>
}

@code {
    private ICollection<ToDo> todos;
    private string errorLabel;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoHome.GetAsync();
    }

    private async Task RemoveToDo(int id)
    {
        errorLabel = "";
        try
        {
            ToDo toDoToRemove = todos.First(t => t.Id == id);
            await TodoHome.DeleteAsync(id);
            todos.Remove(toDoToRemove);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private async Task ToggleStatus(bool status, ToDo toDo)
    {
        errorLabel = "";
        toDo.IsCompleted = status;
        try
        {
            await TodoHome.UpdateAsync(toDo);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
}