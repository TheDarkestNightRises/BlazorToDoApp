@page "/AddToDo"
@using Domain.Models
@using Domain.Interfaces
@inject ITodoHome ToDoHome
@inject NavigationManager NavMgr;

<div class="box">
    <h3>AddToDo</h3>
    <EditForm Model="@newToDoItem" OnValidSubmit="@AddNewToDo">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group field">
            <span>
                <label> User Id: </label>
            </span>
            <span>
                <InputNumber @bind-Value="newToDoItem.OwnerID"/>
            </span>
        </div>
        <div class="form-group field">
            <span>
                <label> Title: </label>
            </span>
            <span>
                <InputTextArea rows="4" @bind-Value="newToDoItem.Title"/>
            </span>
        </div>
        <p class="actions">
            <button class="acceptbtn" type="submit"> Create </button>
        </p>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorLabel))
    {
        <label>@errorLabel</label>
    }
</div>


@code {
    private ToDo newToDoItem = new ToDo();
    private string errorLabel;

    private async Task AddNewToDo()
    {
        errorLabel = "";
        try
        {
            await ToDoHome.AddAsync(newToDoItem);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            return;
        }
        NavMgr.NavigateTo("/Todos");
    }
}